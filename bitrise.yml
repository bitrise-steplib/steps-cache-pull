format_version: 1.1.0
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

app:
  envs:
  # define these in your .bitrise.secrets.yml
  - BITRISE_CACHE_API_URL: $BITRISE_CACHE_API_URL
  - ORIG_BITRISE_SOURCE_DIR: $BITRISE_SOURCE_DIR

workflows:
  ci:
    before_run:
    - audit-this-step
    - go-tests
    - remote_cache_test
    - local_tar_test
    - local_gzip_test
    - local_stack_change_test
    - remote_uncompressed_test
    - remote_compressed_test
  
  test:
    before_run:
    - go-tests
    - local_tar_test
    - local_gzip_test
    - local_stack_change_test

  go-tests:
    steps:
    - go-list:
    - golint:
    - errcheck:
    - go-test:
    
  local_stack_change_test:
    envs:
    - TMP_DIR: $ORIG_BITRISE_SOURCE_DIR/_tmp_local_stack_change_test
    steps:
    - script:
        title: Cleanup $TMP_DIR
        inputs:
        - content: |
            #!/bin/bash
            set -ex
            rm -rf "$TMP_DIR"
    - change-workdir:
        title: Switch working dir to $TMP_DIR
        run_if: true
        inputs:
        - path: $TMP_DIR
        - is_create_path: true
    - script:
        title: Create test archive
        inputs:
        - content: |
            #!/bin/bash
            set -ex

            echo "test" > "$TMP_DIR/File.txt"
            echo '{ "stack_id": "Wrong Stack ID" }' > "/tmp/archive_info.json"
            tar -cvf "archive.tar.gz" "/tmp/archive_info.json" "File.txt"
            rm -rf "$TMP_DIR/File.txt"
            envman add --key "CACHE_ARCHIVE_URL" --value "file://$TMP_DIR/archive.tar.gz"
    - path::./:
        title: Step Test
        run_if: true
        is_skippable: false
        inputs:
        - is_debug_mode: true
        - cache_api_url: $CACHE_ARCHIVE_URL
        - allow_fallback: "false"
    - script:
        title: Test if archive uncompressed
        inputs:
        - content: |
            # !/bin/env bash
            set -ex

            if [ -f $TMP_DIR/File.txt ]; then
              echo "File.txt should not exist"
              exit 1
            fi

  local_gzip_test:
    envs:
    - TMP_DIR: $ORIG_BITRISE_SOURCE_DIR/_tmp_local_gzip_test
    steps:
    - script:
        title: Cleanup $TMP_DIR
        inputs:
        - content: |
            #!/bin/bash
            set -ex
            rm -rf "$TMP_DIR"
    - change-workdir:
        title: Switch working dir to $TMP_DIR
        run_if: true
        inputs:
        - path: $TMP_DIR
        - is_create_path: true
    - script:
        title: Create test archive
        inputs:
        - content: |
            #!/bin/bash
            set -ex

            echo "test" > "$TMP_DIR/File.txt"

            ARCH=$(uname -m)
            if [[ "$ARCH" == "x86_64" ]]; then
                ARCH="amd64"
            fi
            echo { \"stack_id\": \"${BITRISEIO_STACK_ID}\", \"architecture\": \"${ARCH}\" } > $TMP_DIR/archive_info.json
            tar -cvf "archive.tar.gz" "archive_info.json" "File.txt"
            rm -rf "$TMP_DIR/File.txt"
            envman add --key "CACHE_ARCHIVE_URL" --value "file://$TMP_DIR/archive.tar.gz"
    - path::./:
        title: Step Test
        run_if: true
        is_skippable: false
        inputs:
        - is_debug_mode: true
        - cache_api_url: $CACHE_ARCHIVE_URL
        - allow_fallback: "false"
    - script:
        title: Test if archive uncompressed
        inputs:
        - content: |
            # !/bin/env bash
            set -ex

            if [ ! -f $TMP_DIR/File.txt ]; then
              echo "File.txt does not exist"
              exit 1
            fi

  local_tar_test:
    envs:
    - TMP_DIR: $ORIG_BITRISE_SOURCE_DIR/_tmp_local_tar_test
    steps:
    - script:
        title: Cleanup $TMP_DIR
        inputs:
        - content: |
            #!/bin/bash
            set -ex
            rm -rf "$TMP_DIR"
    - change-workdir:
        title: Switch working dir to $TMP_DIR
        run_if: true
        inputs:
        - path: $TMP_DIR
        - is_create_path: true
    - script:
        title: Create test archive
        inputs:
        - content: |
            #!/bin/bash
            set -ex

            echo "test" > "$TMP_DIR/File.txt"

            ARCH=$(uname -m)
            if [[ "$ARCH" == "x86_64" ]]; then
                ARCH="amd64"
            fi
            echo { \"stack_id\": \"${BITRISEIO_STACK_ID}\", \"architecture\": \"${ARCH}\" } > $TMP_DIR/archive_info.json
            tar -cvf "archive.tar" "archive_info.json" "File.txt"
            rm -rf "$TMP_DIR/File.txt"
            envman add --key "CACHE_ARCHIVE_URL" --value "file://$TMP_DIR/archive.tar"
    - path::./:
        title: Step Test
        run_if: true
        is_skippable: false
        inputs:
        - is_debug_mode: true
        - cache_api_url: $CACHE_ARCHIVE_URL
        - allow_fallback: "false"
    - script:
        title: Test if archive uncompressed
        inputs:
        - content: |
            # !/bin/env bash
            set -ex

            if [ ! -f $TMP_DIR/File.txt ]; then
              echo "File.txt does not exist"
              exit 1
            fi

  remote_cache_test:
    envs:
    - TMP_DIR: $ORIG_BITRISE_SOURCE_DIR/_tmp_remote_cache_test
    steps:
    - script:
        title: Cleanup $TMP_DIR
        inputs:
        - content: |
            #!/bin/bash
            set -ex
            rm -rf "$TMP_DIR"
    - change-workdir:
        title: Switch working dir to $TMP_DIR
        run_if: true
        inputs:
        - path: $TMP_DIR
        - is_create_path: true
    - script:
        title: Create File to cache
        inputs:
        - content: |
            # !/bin/env bash
            set -ex
            echo "test" > $TMP_DIR/File.txt
    - git::https://github.com/bitrise-steplib/steps-cache-push@STEP-1996-arch:
    # - cache-push:
        run_if: true
        inputs:
        - cache_paths: $TMP_DIR/File.txt
    - script:
        title: Remove test File
        inputs:
        - content: |
            # !/bin/env bash
            set -ex
            rm -rf $TMP_DIR/File.txt
    - path::./:
        title: Step Test
        run_if: true
        is_skippable: false
        inputs:
        - is_debug_mode: true
        - cache_api_url: $BITRISE_CACHE_API_URL
        - allow_fallback: "false"
    - script:
        title: Test if archive uncompressed
        inputs:
        - content: |
            # !/bin/env bash
            set -ex

            if [ ! -f $TMP_DIR/File.txt ]; then
              echo "File.txt does not exist"
              exit 1
            fi
  remote_compressed_test:
    envs:
      - TMP_DIR: $ORIG_BITRISE_SOURCE_DIR/_tmp_remote_compressed_test
    steps:
      - script:
          title: Cleanup $TMP_DIR
          inputs:
            - content: |
                #!/bin/bash
                set -ex
                rm -rf "$TMP_DIR"
      - change-workdir:
          title: Switch working dir to $TMP_DIR
          run_if: true
          inputs:
            - path: $TMP_DIR
            - is_create_path: true
      - script:
          title: Create test archive
          inputs:
            - content: |
                #!/bin/bash
                set -ex
                shopt -s nocasematch
                if [[ `uname -s` == "linux" ]]
                then
                  CACHE_ARCHIVE_URL="https://storage.googleapis.com/cache_pull_test_bucket/linux-comp.tar.gz"
                else
                  CACHE_ARCHIVE_URL="https://storage.googleapis.com/cache_pull_test_bucket/macos-comp.tar.gz"
                fi
                envman add --key "CACHE_ARCHIVE_URL" --value $CACHE_ARCHIVE_URL
      - path::./:
          title: Step Test
          run_if: true
          is_skippable: false
          inputs:
            - is_debug_mode: true
            - cache_api_url: $CACHE_ARCHIVE_URL
            - extract_to_relative_path: true
            - allow_fallback: "false"
      - script:
          title: Test if archive uncompressed
          inputs:
            - content: |
                # !/bin/env bash
                set -ex

                if [ ! -f $TMP_DIR/tmp/archive_info.json ]; then
                  echo "tmp/archive_info.json does not exist"
                  exit 1
                fi

  remote_uncompressed_test:
    envs:
      - TMP_DIR: $ORIG_BITRISE_SOURCE_DIR/_tmp_remote_uncompressed_test
    steps:
      - script:
          title: Cleanup $TMP_DIR
          inputs:
            - content: |
                #!/bin/bash
                set -ex
                rm -rf "$TMP_DIR"
      - change-workdir:
          title: Switch working dir to $TMP_DIR
          run_if: true
          inputs:
            - path: $TMP_DIR
            - is_create_path: true
      - script:
          title: Create test archive
          inputs:
            - content: |
                #!/bin/bash
                set -ex
                shopt -s nocasematch
                if [[ `uname -s` == "linux" ]]
                then
                  CACHE_ARCHIVE_URL="https://storage.googleapis.com/cache_pull_test_bucket/linux.tar.gz"
                else
                  CACHE_ARCHIVE_URL="https://storage.googleapis.com/cache_pull_test_bucket/macos.tar.gz"
                fi
                envman add --key "CACHE_ARCHIVE_URL" --value $CACHE_ARCHIVE_URL
                envman add --key "BITRISEIO_STACK_ID" --value ""
      - path::./:
          title: Step Test
          run_if: true
          is_skippable: false
          inputs:
            - is_debug_mode: true
            - cache_api_url: $CACHE_ARCHIVE_URL
            - extract_to_relative_path: true
            - allow_fallback: "false"
      - script:
          title: Test if archive uncompressed
          inputs:
            - content: |
                # !/bin/env bash
                set -ex

                if [ ! -f $TMP_DIR/tmp/archive_info.json ]; then
                  echo "tmp/archive_info.json does not exist"
                  exit 1
                fi

  audit-this-step:
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            stepman audit --step-yml ./step.yml

  # ----------------------------------------------------------------
  # --- Utility workflows
  dep-update:
    title: Dep update
    description: |
      Used for updating bitrise dependencies with dep
    steps:
    - script:
        title: Dependency update
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            go get -u -v github.com/golang/dep/cmd/dep
            dep ensure -v
            dep ensure -v -update
